/*
* This source file is part of the osgOcean library
* 
* Copyright (C) 2009 Kim Bale
* Copyright (C) 2009 The University of Hull, UK
* 
* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU Lesser General Public License as published by the Free Software
* Foundation; either version 3 of the License, or (at your option) any later
* version.

* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
* http://www.gnu.org/copyleft/lesser.txt.
*/

#pragma once
#include <osgOcean/Export>
#include <osg/Program>
#include <osg/Notify>

#include <string>
#include <sstream>
#include <fstream>
#include <vector>

namespace osgOcean
{
	class OSGOCEAN_EXPORT DynamicShader
	{
	public:
		typedef std::vector<std::string> OPTION_LIST;

	private:
		osg::ref_ptr<osg::Program> _program;
		osg::ref_ptr<osg::Shader> _fShader;
		osg::ref_ptr<osg::Shader> _vShader;

		std::string _origVertexSource;
		std::string _origFragmentSource;

		std::string _newVertexSource;
		std::string _newFragmentSource;

		OPTION_LIST _optionList;

	public:
		DynamicShader( void );
		DynamicShader( const std::string& vertexPath, const std::string& fragmentPath );

		virtual ~DynamicShader(void){};
		
		void rebuild( void );
		void load( const std::string& vertexPath, const std::string& fragmentPath );

		void addDefine( const std::string& name );
		void addDefine( const std::string& name, unsigned int val );

		void printShader(void);

		inline const std::string& getDefine( unsigned int num ){
			return _optionList.at(num);
		}

		inline osg::Program* getProgram( void ) const {
			return _program.get();
		}

		inline bool setVertexShaderSource(const std::string& path ){
			return storeSource( path, _origVertexSource );
		}

		inline bool setFragmentShaderSource(const std::string& path ){
			return storeSource( path, _origFragmentSource );
		}
	private:
		void amendShader( std::string& newSource, const std::string& oldSource );
		bool storeSource( const std::string& path, std::string& source );


	};
}